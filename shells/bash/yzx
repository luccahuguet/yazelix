#!/bin/bash
# Shell-agnostic yzx command for Yazelix
# Provides the same functionality as the nushell yzx command suite
# Works on bash, fish, and zsh

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
YAZELIX_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Default values
YAZELIX_VERSION="v9"
YAZELIX_DESCRIPTION="Yazi + Zellij + Helix integrated terminal environment"
DEFAULT_SHELL="nu"
DEFAULT_TERMINAL="ghostty"
DEFAULT_HELIX_MODE="release"

# Shell configuration files
declare -A SHELL_CONFIGS=(
    ["bash"]="$HOME/.bashrc"
    ["nushell"]="$HOME/.config/nushell/config.nu"
    ["fish"]="$HOME/.config/fish/config.fish"
    ["zsh"]="$HOME/.zshrc"
)

# Yazelix configuration files
declare -A YAZELIX_CONFIG_FILES=(
    ["bash"]="$HOME/.config/yazelix/shells/bash/yazelix_bash_config.sh"
    ["nushell"]="$HOME/.config/yazelix/nushell/config/config.nu"
    ["fish"]="$HOME/.config/yazelix/shells/fish/yazelix_fish_config.fish"
    ["zsh"]="$HOME/.config/yazelix/shells/zsh/yazelix_zsh_config.zsh"
)

# Function to show help
show_help() {
    echo "=== Yazelix Command Suite ==="
    echo ""
    echo "DIAGNOSTICS:"
    echo "  yzx test [--verbose] [--filter] [--new-window] - Run test suite"
    echo ""
    echo "CONFIGURATION MANAGEMENT:"
    echo "  yzx config_status [shell]      - Show status of all shell configurations"
    echo "  yzx config_schema              - Show the configuration schema"
    echo ""
    echo "VERSION AND SYSTEM:"
    echo "  yzx versions                   - Show version info for all tools"
    echo "  yzx info                       - Show yazelix system information"
    echo "  yzx why                        - Why Yazelix (elevator pitch)"
    echo ""
    echo "LAUNCHER:"
    echo "  yzx launch                     - Launch yazelix via desktop entry (bundled terminals)"
    echo "  yzx start                      - Start yazelix directly"
    echo "  yzx env [--no-shell]           - Load yazelix environment without UI (configured shell)"
    echo ""
    echo "MAINTENANCE:"
    echo "  yzx update                     - Run 'nix flake update' for Yazelix"
    echo ""
    echo "HELP:"
    echo "  yzx help                       - Show this help message"
    echo ""
    echo "Supported shells: bash, nushell, fish, zsh"
    echo "=========================================="
}

# Function to extract yazelix section from a config file
extract_yazelix_section() {
    local config_file="$1"
    local start_marker="# YAZELIX START - Yazelix managed configuration (do not modify this comment)"
    local end_marker="# YAZELIX END - Yazelix managed configuration (do not modify this comment)"

    if [[ ! -f "$config_file" ]]; then
        echo "‚ùå Config file not found: $config_file"
        return 1
    fi

    # Extract content between markers
    local content
    content=$(awk "/$start_marker/,/$end_marker/" "$config_file" 2>/dev/null)

    if [[ -n "$content" ]]; then
        echo "‚úÖ Yazelix section found in $config_file"
        echo "$content"
        return 0
    else
        echo "‚ÑπÔ∏è  No yazelix section found in $config_file (optional)"
        return 1
    fi
}

# Function to check if yazelix section exists in config
check_yazelix_section() {
    local config_file="$1"
    local start_marker="# YAZELIX START - Yazelix managed configuration (do not modify this comment)"

    if [[ -f "$config_file" ]] && grep -q "$start_marker" "$config_file" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Function to show configuration status (canonical, no aliases)
config_status() {
    local shell="$1"

    if [[ -z "$shell" ]]; then
        # Show all configurations
        echo "=== Yazelix Configuration Status ==="
        for shell_name in "${!SHELL_CONFIGS[@]}"; do
            local config_file="${SHELL_CONFIGS[$shell_name]}"
            local yazelix_config="${YAZELIX_CONFIG_FILES[$shell_name]}"

            echo ""
            echo "--- $shell_name ---"
            echo "Config file: $config_file"
            echo "Yazelix config: $yazelix_config"

            if check_yazelix_section "$config_file"; then
                echo "Status: ‚úÖ Configured"
            else
                echo "Status: ‚ÑπÔ∏è  Not configured (optional)"
            fi

            if [[ -f "$yazelix_config" ]]; then
                echo "Yazelix config: ‚úÖ Exists"
            else
                echo "Yazelix config: ‚ùå Missing"
            fi
        done
    else
        # Show specific shell configuration
        if [[ -z "${SHELL_CONFIGS[$shell]}" ]]; then
            echo "‚ùå Unsupported shell: $shell"
            echo "Supported shells: ${!SHELL_CONFIGS[*]}"
            return 1
        fi

        local config_file="${SHELL_CONFIGS[$shell]}"
        extract_yazelix_section "$config_file"
    fi
}

# Function to show version info
show_versions() {
    echo "=== Yazelix Tool Versions ==="
    echo ""

    # Core tools
    echo "Core Tools:"
    if command -v zellij >/dev/null 2>&1; then
        echo "  zellij: $(zellij --version 2>/dev/null | head -n1 || echo 'unknown')"
    else
        echo "  zellij: not found"
    fi

    if command -v yazi >/dev/null 2>&1; then
        echo "  yazi: $(yazi --version 2>/dev/null | head -n1 || echo 'unknown')"
    else
        echo "  yazi: not found"
    fi

    if command -v hx >/dev/null 2>&1; then
        echo "  helix: $(hx --version 2>/dev/null | head -n1 || echo 'unknown')"
    else
        echo "  helix: not found"
    fi

    if command -v nu >/dev/null 2>&1; then
        echo "  nushell: $(nu --version 2>/dev/null | head -n1 || echo 'unknown')"
    else
        echo "  nushell: not found"
    fi

    echo ""
    echo "Shell Tools:"
    if command -v starship >/dev/null 2>&1; then
        echo "  starship: $(starship --version 2>/dev/null | head -n1 || echo 'unknown')"
    else
        echo "  starship: not found"
    fi

    if command -v zoxide >/dev/null 2>&1; then
        echo "  zoxide: $(zoxide --version 2>/dev/null | head -n1 || echo 'unknown')"
    else
        echo "  zoxide: not found"
    fi

    if command -v lazygit >/dev/null 2>&1; then
        echo "  lazygit: $(lazygit --version 2>/dev/null | head -n1 || echo 'unknown')"
    else
        echo "  lazygit: not found"
    fi

    if command -v mise >/dev/null 2>&1; then
        echo "  mise: $(mise --version 2>/dev/null | head -n1 || echo 'unknown')"
    else
        echo "  mise: not found"
    fi
}



# Function to show system info
show_info() {
    nu -c "use $YAZELIX_DIR/nushell/scripts/core/yazelix.nu *; yzx info"
}

# Function to launch yazelix via desktop entry (uses bundled terminals)
launch_yazelix() {
    # Detect platform
    local platform
    platform="$(uname -s)"

    # Try to launch via desktop entry first (Linux-only - uses Yazelix bundled terminals)
    if [[ "$platform" == "Linux" ]] && command -v gtk-launch >/dev/null 2>&1 && [[ -f "$HOME/.local/share/applications/com.yazelix.Yazelix.desktop" ]]; then
        echo "üöÄ Launching Yazelix via desktop entry (bundled terminals)..."
        gtk-launch com.yazelix.Yazelix
    elif command -v nu >/dev/null 2>&1; then
        if [[ "$platform" != "Linux" ]]; then
            echo "üöÄ Launching Yazelix (desktop entries not available on macOS)..."
        else
            echo "‚ö†Ô∏è  Desktop entry not found, falling back to terminal detection..."
        fi
        nu "$YAZELIX_DIR/nushell/scripts/core/launch_yazelix.nu"
    else
        echo "‚ùå Neither desktop entry nor nushell found. Please install nushell or set up desktop integration."
        exit 1
    fi
}

# Function to start yazelix
start_yazelix() {
    nu "$YAZELIX_DIR/nushell/scripts/core/start_yazelix.nu"
}

# Function to load yazelix environment without UI
env_yazelix() {
    if ! command -v nu >/dev/null 2>&1; then
        echo "‚ùå Nushell is required to run 'yzx env'."
        echo "   Tip: install Nushell or use 'nix run nixpkgs#nushell'."
        return 1
    fi

    local nu_script="use '${YAZELIX_DIR}/nushell/scripts/core/yazelix.nu' *; yzx env"
    for arg in "$@"; do
        case "$arg" in
            --no-shell|-n)
                nu_script+=" --no-shell"
                ;;
            *)
                echo "‚ùå Unknown option for 'yzx env': $arg"
                echo "   Supported option: --no-shell"
                return 1
                ;;
        esac
    done

    nu -c "$nu_script"
}

# Function to restart yazelix
restart_yazelix() {
    # Get the current Zellij session name (strip ANSI codes)
    local current_session_raw
    current_session_raw=$(zellij list-sessions | grep current | head -n1 | awk '{print $1}')
    # Remove ANSI escape codes (robust)
    local clean_session
    clean_session=$(echo "$current_session_raw" | sed -E 's/\x1B\[[0-9;]*[A-Za-z]//g')
    echo "Restarting Yazelix..."
    launch_yazelix &
    sleep 1
    if [[ -z "$clean_session" ]]; then
        echo "No current Zellij session detected. Skipping kill step."
    else
        echo "Killing Zellij session: $clean_session"
        zellij kill-session "$clean_session" || echo "Failed to kill session: $clean_session"
    fi
}

# Main command dispatcher
main() {
    local subcommand="$1"

    case "$subcommand" in
        "help"|"")
            show_help
            ;;
        "config_status")
            config_status "$2"
            ;;
        "config_schema")
            echo "=== Yazelix Configuration Schema ==="
            echo "This command will display the YAZELIX_CONFIG_FILES structure."
            echo "It's not directly tied to a specific shell's config file."
            echo "YAZELIX_CONFIG_FILES:"
            for shell_name in "${!YAZELIX_CONFIG_FILES[@]}"; do
                echo "  $shell_name: ${YAZELIX_CONFIG_FILES[$shell_name]}"
            done
            echo "==================================="
            ;;
        "versions")
            show_versions
            ;;

        "info")
            show_info
            ;;
        "why")
            cat << 'PITCH'
Yazelix is a reproducible terminal IDE (Yazi + Zellij + Helix) with:
‚Ä¢ Zero‚Äëconflict keybindings, zjstatus, smooth Yazi‚Üîeditor flows
‚Ä¢ Top terminals (Ghostty/WezTerm/Kitty/Alacritty) and shells (Bash/Zsh/Fish/Nushell)
‚Ä¢ One‚Äëfile config (Nix) with sane defaults and curated packs
‚Ä¢ Remote‚Äëready over SSH; same superterminal on barebones hosts
‚Ä¢ Git and tooling preconfigured (lazygit, starship, zoxide, carapace)
Get everything running in <10 minutes. No extra deps, only Nix.
Install once, get the same environment everywhere.
PITCH
            ;;
        "launch")
            launch_yazelix
            ;;
        "start")
            start_yazelix
            ;;
        "env")
            shift
            env_yazelix "$@"
            ;;
        "update")
            nu -c "use $YAZELIX_DIR/nushell/scripts/core/yazelix.nu *; yzx update"
            ;;
        "restart")
            restart_yazelix
            ;;
        "test")
            # Pass through flags to nushell
            shift  # Remove 'test' from arguments
            nu -c "use $YAZELIX_DIR/nushell/scripts/core/yazelix.nu *; yzx test $*"
            ;;
        *)
            echo "‚ùå Unknown subcommand: $subcommand"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run the main function with all arguments
main "$@"
